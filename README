Last updated : 02 Oct 14

OVERVIEW
--------

The ADAQ (AIMS Data AcQuisition) library is a self-contained software
layer that manages the interface between the CAEN data acquisition
hardware and the AIMS acquisition and analysis codes. It automaticall
provides the necessary CAEN libraries (CAENComm, CAENDigitizer,
CAENVME) and then adds an enhanced layer of functionality on top to
provide more powerful and straightforward control of the CAEN
hardware. ADAQ provides users with C, C++, and Python interfaces for
controlling the CAEN hardware; the Python methods are created via
Boost.Python, which wraps the C++ methods to provide a seamless Python
interface. The hierarchy can be envisioned as follows:

     --------------------------
     | Acquisition / Analysis |
     --------------------------
                 |
                 V
           ADAQ libraries
       --------------------
       | Enhanced methods |
       |         |        |  
       |         V        |  
       |  CAEN libraries  |
       --------------------
                 |
                 V
         -----------------
         | CAEN HARDWARE |
         -----------------


The ADAQ distribution also contains "utility" classes that may be
generally useful for any of the acquisition and analysis programs that
utilize the ADAQ libraries. One advantage of the ADAQ library layer is
that acquisition and analysis code in any language (provided it can
access C, C++, or Python classes) and with any graphical interface can
be written to utilize the ADAQ library. It is often the case that
different codes will require access to a single class that transcends
a single code. In this case, it is desirable that a single, easily
maintainable, and self-consistent class is available for any code that
requires it. For example, a data storage class used by an acquisition
code may be required for an analysis code to access that data.

At present, a number of C++ classes for data storage and graphical
user interfaces are provided for the ROOT toolkit
(http://root.cern.ch/drupal/)


DIRECTORY STRUCTURE/DESCRIPTION
-------------------------------

--> adaq/ : The ADAQ source code

--> caen/ : All CAEN items required for ADAQ
    --> libs/ : most up-to-date libraries (CAEMComm, CAENDigitizer, CAENVMELib)
    --> include/ : most up-to-date headers files for above libraries
    --> ref/ : includes all original CAEN sources, manual, notes, etc
        --> drivers/ : Linux drivers for the VME-USB connection
        --> firmware/ : firmware for the V1718, V1720 VME boards
        --> libraries/ : contains CAENComm, CAENDigitizer, and CAENVME libraries
	--> manuals/ : presently useful CAEN manuals
	--> notes/ : useful notes
	--> software/ : CAEN-distributed binary software (e.g. CAENUpgrader tool)

--> lib/ : The main library for ADAQ and CAEN libraries; users of the ADAQ libraries
           should link against the appropriate architecture libraries contained here
	   when building their own application
    --> i686/ : 32-bit libraries
    --> x86_64 : 64-bit libraries

--> include/ : The main directory for ADAQ and CAEN header files; users of the ADAQ
               libraries should include this header directory when buildilng their
	       own application

--> root/ : ROOT class definitions for general data storage and graphical user 
            interfaces. User's should include these headers when building their own
	    application if they wish to use them

--> scripts/ : Bash scripts for installation and setup of ADAQ 

--> templates/ : Directory containing various acquisition / readout templates
                 for copying->rapid prototype of testing and production codes


ADAQ DIRECTORY
--------------

The ADAQ library essentially provides all of the CAEN library methods
to control the acquisition and power supply hardware along with a
number of enhanced methods for more powerful and often more simpler
interfaces that utilize the CAEN library methods. The enhanced methods
can be found in the C++ ADAQBridge (V1718 control), ADAQDigitizer
(V1720 control) and ADAQHighVoltage (V6534 control) classes.

The ADAQPythonWrapper class uses Boost.Python to wrap the
aforementioned C++ classes such that the user has the additional
option of seamless Python interface without the need to rewrite any
code. This has additional advantage of ensuring consistency between
the C++ and Python interfaces.

All of the above is compiled into two shared object libraries :
"libADAQ.so" provides the C++ interface methods while "libPyDAQ.so"
provides the Python inteface methods. A GNU makefile control the
library building. 


CAEN DIRECTORY
--------------

This directory contains everything CAEN in order to build ADAQ and
subsequently use ADAQ and CAEN headers and libraries in a user's own
application. The $ADAQREPO/caen/lib/{i686,x86_64} directory collects
the most up-to-date CAEN libraries in a single location; the
$ADAQREPO/caen/include directory collects the most up-to-date CAEN
headers in a single location. Thus, the CAEN libs and headers DO NOT
need to be installed on the system (which requires root access) but
can simply be included/linked-to in these locations from a user's
build system. In addition, all of the original CAEN libraries - as
well as presently used firmware, software, manuals, and other items -
are contained in the $ADAQREPO/caen/ref directory; legacy versions of
the firmware and libraries can be found here for backwards
compatibility. Including the libraries within the ADAQ distribution
provides explicit control over versions and ensures easy portability
between multiple machines without the need to download/install the
CAEN libraries everytime.


-- Brief descriptions of the CAEN libraries --

The following are the most up-to-date CAEN libraries as of 10 Feb 14.
Previous versions are contained within the caen/archive/ directory for
backwards compatibility. Note that I rename the top-level CAEN library
directories to conform to a standard since CAEN apparently believes
random naming and version numbering is somehow fucking useful.

--CAENComm-1.2.0 : header files (includes) and library functions for
                   general communication with CAEN VME devices
  
--CAENVMELib-2.41.0 : header files (includes) and library functions for
                      general operating system (OS) to VME communication
                      via one of several possible links (USB, optical,etc). 

--CAENDigitizer-2.6.0 : header files (includes) and library functions for
                        general communication with the CAEN digitizer modules


VERSION NUMBER EXPLANATION
--------------------------

The ADAQ library is assigned a 3 digit version number number in the
format X.Y.Z. The purpose is to uniquely identify "production
versions" of the library for use in ADAQ-based projects. This provides
consistency with user code, the ability to roll-back version numbers
to provide backwards compatibility and legacy version builds, and
"stamping" of the version number on presentations, memos, analysis,
papers, etc, for full reproducibility of the results if need be.
Version numbers attempt to adhere as closely as possible the following
conventions:

ADAQ Library Version : X.Y.Z
 
 X = Major revision: Large changes are made to the code, including
     substantial changes to the internal code or layout that require
     that could break user projects. Import "production level"
     features are released and sanctioned for official use.
      
 Y = Minor revision: Significant but less impacting changes to the
     code, new "beta" features for testing, important bug fixes that
     are found to affect usability or performance of the library.

 Z = Bug fixes / comments: These updates are intented to fix
     non-catostrophic bugs, update code comments, implement minor
     improvements or new features that enhance usability. No new
     features are allowed to be introduced only updated.
